[
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "view_answers",
        "kind": 2,
        "importPath": "app.routers.answer",
        "description": "app.routers.answer",
        "peekOfCode": "def view_answers(db: Session = Depends(get_db)):\n    answers = db.query(Answer).all()\n    return answers",
        "detail": "app.routers.answer",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.answer",
        "description": "app.routers.answer",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\", response_model=list[AnswerView])\ndef view_answers(db: Session = Depends(get_db)):\n    answers = db.query(Answer).all()\n    return answers",
        "detail": "app.routers.answer",
        "documentation": {}
    },
    {
        "label": "view_question_sets",
        "kind": 2,
        "importPath": "app.routers.question",
        "description": "app.routers.question",
        "peekOfCode": "def view_question_sets(db: Session = Depends(get_db)):\n    question_sets = db.query(QuestionSet).all()\n    return question_sets\n@router.get(\"/set/{set_id}\", response_model=QuestionAndAnwerSetView)\ndef view_question_and_anwser_by_set(set_id: int, db: Session = Depends(get_db)):\n    question_set = db.query(QuestionSet).filter(QuestionSet.set_id == set_id).first()\n    if not question_set:\n        return {\"error\": \"Set not found\"}\n    listQuestion = db.query(Question).filter(Question.set_id == set_id).all()\n    listAnswerByQuestion = db.query(Question).filter(Question.set_id == set_id).all()",
        "detail": "app.routers.question",
        "documentation": {}
    },
    {
        "label": "view_question_and_anwser_by_set",
        "kind": 2,
        "importPath": "app.routers.question",
        "description": "app.routers.question",
        "peekOfCode": "def view_question_and_anwser_by_set(set_id: int, db: Session = Depends(get_db)):\n    question_set = db.query(QuestionSet).filter(QuestionSet.set_id == set_id).first()\n    if not question_set:\n        return {\"error\": \"Set not found\"}\n    listQuestion = db.query(Question).filter(Question.set_id == set_id).all()\n    listAnswerByQuestion = db.query(Question).filter(Question.set_id == set_id).all()\n    # Prepare the response model\n    response = QuestionAndAnwerSetView(\n        set_id=question_set.set_id,\n        title=question_set.title,",
        "detail": "app.routers.question",
        "documentation": {}
    },
    {
        "label": "create_question_sets",
        "kind": 2,
        "importPath": "app.routers.question",
        "description": "app.routers.question",
        "peekOfCode": "def create_question_sets(questionSetCreate: QuestionSetCreate, db: Session = Depends(get_db)):\n    db_update = QuestionSet(title=questionSetCreate.title, type=questionSetCreate.type)\n    db.add(db_update)\n    db.commit()\n    db.refresh(db_update)\n    return {\"id\": db_update.set_id, \"title\": db_update.title, \"type\": db_update.type}\n@router.get(\"/\", response_model=list[QuestionView])\ndef view_questions(db: Session = Depends(get_db)):\n    questions = db.query(Question).all()\n    return questions",
        "detail": "app.routers.question",
        "documentation": {}
    },
    {
        "label": "view_questions",
        "kind": 2,
        "importPath": "app.routers.question",
        "description": "app.routers.question",
        "peekOfCode": "def view_questions(db: Session = Depends(get_db)):\n    questions = db.query(Question).all()\n    return questions",
        "detail": "app.routers.question",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.question",
        "description": "app.routers.question",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/sets\", response_model=list[QuestionSetView])\ndef view_question_sets(db: Session = Depends(get_db)):\n    question_sets = db.query(QuestionSet).all()\n    return question_sets\n@router.get(\"/set/{set_id}\", response_model=QuestionAndAnwerSetView)\ndef view_question_and_anwser_by_set(set_id: int, db: Session = Depends(get_db)):\n    question_set = db.query(QuestionSet).filter(QuestionSet.set_id == set_id).first()\n    if not question_set:\n        return {\"error\": \"Set not found\"}",
        "detail": "app.routers.question",
        "documentation": {}
    },
    {
        "label": "view_users",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def view_users(db: Session = Depends(get_db)):\n    users = db.query(User).all()\n    return users\n@router.post(\"/login\")\ndef login(userLogin: UserLogin, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.email == userLogin.email).first()\n    if not db_user or not verify_password(userLogin.password, db_user.password_hash):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid credentials\",",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def login(userLogin: UserLogin, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.email == userLogin.email).first()\n    if not db_user or not verify_password(userLogin.password, db_user.password_hash):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return {\"id\": db_user.user_id, \"username\": db_user.username, \"email\": db_user.email}\n@router.post(\"/register\", response_model=UserView)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(userCreate: UserCreate, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.email == userCreate.email).first()\n    if db_user:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST,\n            detail=\"Email already registered\"\n        )\n    print(userCreate)\n    hashed_password = hash_password(userCreate.password)\n    db_user = User(username=userCreate.username, email=userCreate.email, password_hash=hashed_password)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\", response_model=list[UserView])\ndef view_users(db: Session = Depends(get_db)):\n    users = db.query(User).all()\n    return users\n@router.post(\"/login\")\ndef login(userLogin: UserLogin, db: Session = Depends(get_db)):\n    db_user = db.query(User).filter(User.email == userLogin.email).first()\n    if not db_user or not verify_password(userLogin.password, db_user.password_hash):\n        raise HTTPException(",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "view_user_quests",
        "kind": 2,
        "importPath": "app.routers.user_quest",
        "description": "app.routers.user_quest",
        "peekOfCode": "def view_user_quests(db: Session = Depends(get_db)):\n    user_quests = db.query(UserQuest).all()\n    for quest in user_quests:\n        if quest.completed_at:\n            quest.completed_at = quest.completed_at.isoformat()\n    return user_quests\n@router.get(\"/{user_id}\", response_model=list[UserQuestView])\ndef view_user_quests_by_id(user_id: int, db: Session = Depends(get_db)):\n    user_quests = db.query(UserQuest).filter(UserQuest.user_id == user_id).all()\n    for quest in user_quests:",
        "detail": "app.routers.user_quest",
        "documentation": {}
    },
    {
        "label": "view_user_quests_by_id",
        "kind": 2,
        "importPath": "app.routers.user_quest",
        "description": "app.routers.user_quest",
        "peekOfCode": "def view_user_quests_by_id(user_id: int, db: Session = Depends(get_db)):\n    user_quests = db.query(UserQuest).filter(UserQuest.user_id == user_id).all()\n    for quest in user_quests:\n        if quest.completed_at:\n            quest.completed_at = quest.completed_at.isoformat()\n    return user_quests",
        "detail": "app.routers.user_quest",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user_quest",
        "description": "app.routers.user_quest",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\", response_model=list[UserQuestView])\ndef view_user_quests(db: Session = Depends(get_db)):\n    user_quests = db.query(UserQuest).all()\n    for quest in user_quests:\n        if quest.completed_at:\n            quest.completed_at = quest.completed_at.isoformat()\n    return user_quests\n@router.get(\"/{user_id}\", response_model=list[UserQuestView])\ndef view_user_quests_by_id(user_id: int, db: Session = Depends(get_db)):",
        "detail": "app.routers.user_quest",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = \"mysql+pymysql://root@localhost:3306/testdb\"\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# Configure CORS middleware\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # Allow all domains\n    allow_credentials=True,  # Allow sending cookies\n    allow_methods=[\"*\"],  # Allow all HTTP methods\n    allow_headers=[\"*\"],  # Allow all headers\n)\n# Include routers",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"user\"\n    user_id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(50), nullable=False)\n    email = Column(String(100), nullable=False, unique=True)\n    password_hash = Column(String(255), nullable=False)\n    created_at = Column(TIMESTAMP, server_default=func.current_timestamp())\n    user_quests = relationship(\"UserQuest\", back_populates=\"user\")\nclass QuestionSet(Base):\n    __tablename__ = \"questionset\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "QuestionSet",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class QuestionSet(Base):\n    __tablename__ = \"questionset\"\n    set_id = Column(Integer, primary_key=True, index=True)\n    title = Column(String(100), nullable=False)\n    type = Column(String(50), nullable=False)\n    questions = relationship(\"Question\", back_populates=\"question_set\")\nclass Question(Base):\n    __tablename__ = \"question\"\n    question_id = Column(Integer, primary_key=True, index=True)\n    set_id = Column(Integer, ForeignKey(\"questionset.set_id\"), nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Question",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Question(Base):\n    __tablename__ = \"question\"\n    question_id = Column(Integer, primary_key=True, index=True)\n    set_id = Column(Integer, ForeignKey(\"questionset.set_id\"), nullable=False)\n    question_text = Column(Text, nullable=False)\n    question_set = relationship(\"QuestionSet\", back_populates=\"questions\")\n    answers = relationship(\"Answer\", back_populates=\"question\")\n    user_quests = relationship(\"UserQuest\", back_populates=\"question\")\nclass Answer(Base):\n    __tablename__ = \"answer\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Answer",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Answer(Base):\n    __tablename__ = \"answer\"\n    answer_id = Column(Integer, primary_key=True, index=True)\n    question_id = Column(Integer, ForeignKey(\"question.question_id\"), nullable=False)\n    answer_text = Column(Text, nullable=False)\n    is_correct = Column(Integer, default=0) \n    question = relationship(\"Question\", back_populates=\"answers\")\nclass UserQuest(Base):\n    __tablename__ = \"user_quest\"\n    user_quest_id = Column(Integer, primary_key=True, index=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserQuest",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class UserQuest(Base):\n    __tablename__ = \"user_quest\"\n    user_quest_id = Column(Integer, primary_key=True, index=True)\n    user_id = Column(Integer, ForeignKey(\"user.user_id\"), nullable=False)\n    question_id = Column(Integer, ForeignKey(\"question.question_id\"), nullable=False)\n    status = Column(Boolean, nullable=False)\n    completed_at = Column(TIMESTAMP, server_default=func.current_timestamp())\n    user = relationship(\"User\", back_populates=\"user_quests\")\n    question = relationship(\"Question\", back_populates=\"user_quests\")",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: EmailStr\n    password:str\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password:str\nclass UserView(BaseModel):\n    user_id: int\n    username: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password:str\nclass UserView(BaseModel):\n    user_id: int\n    username: str\n    email: EmailStr\n    class Config:\n        from_attributes = True\nclass QuestionSetCreate(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserView",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserView(BaseModel):\n    user_id: int\n    username: str\n    email: EmailStr\n    class Config:\n        from_attributes = True\nclass QuestionSetCreate(BaseModel):\n    title: str\n    type: str = Field(default=\"Multiple Choice\")\nclass QuestionSetView(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "QuestionSetCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class QuestionSetCreate(BaseModel):\n    title: str\n    type: str = Field(default=\"Multiple Choice\")\nclass QuestionSetView(BaseModel):\n    set_id: int\n    title: str\n    type: str\n    class Config:\n        from_attributes = True\nclass AnswerView(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "QuestionSetView",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class QuestionSetView(BaseModel):\n    set_id: int\n    title: str\n    type: str\n    class Config:\n        from_attributes = True\nclass AnswerView(BaseModel):\n    answer_text: str\n    is_correct: int\n    class Config:",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "AnswerView",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class AnswerView(BaseModel):\n    answer_text: str\n    is_correct: int\n    class Config:\n        from_attributes = True\nclass QuestionView(BaseModel):\n    question_id: int\n    question_text: str\n    list: List[AnswerView]\n    class Config:",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "QuestionView",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class QuestionView(BaseModel):\n    question_id: int\n    question_text: str\n    list: List[AnswerView]\n    class Config:\n        from_attributes = True\nclass QuestionAndAnwerSetView(BaseModel):\n    set_id: int\n    title: str\n    type: str",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "QuestionAndAnwerSetView",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class QuestionAndAnwerSetView(BaseModel):\n    set_id: int\n    title: str\n    type: str\n    list: List[QuestionView]\n    class Config:\n        from_attributes = True\nclass UserQuestView(BaseModel):\n    user_quest_id: int\n    user_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserQuestView",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserQuestView(BaseModel):\n    user_quest_id: int\n    user_id: int\n    question_id: int\n    status: bool\n    completed_at: str\n    class Config:\n        from_attributes = True",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]